{"version":3,"sources":["tweetData.jsx","components/Avatar.jsx","components/Message.jsx","components/NameWithHandle.jsx","components/Time.jsx","components/ReplyButton.jsx","components/RetweetButton.jsx","components/LikeButton.jsx","components/MoreOptionsButton.jsx","App.js","serviceWorker.js","index.js"],"names":["testTweet","message","gravatar","author","handle","name","likes","retweets","timestamp","Avatar","props","hash","url","src","alt","className","Message","text","NameWithHandle","Time","timeString","moment","time","fromNow","ReplyButton","RetweetButton","count","LikeButton","MoreOptionsButton","App","tweet","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","tweetData","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAYeA,EAZG,CAChBC,QAAS,sDACTC,SAAU,mCACVC,OAAQ,CACNC,OAAQ,aACRC,KAAM,kBAERC,MAAO,EACPC,SAAU,EACVC,UAAW,uB,yECDEC,MANf,SAAgBC,GAAQ,IACdC,EAASD,EAATC,KACJC,EAAG,0CAAsCD,GAC7C,OAAO,yBAAKE,IAAKD,EAAKE,IAAI,cAAcC,UAAU,YCErCC,MALf,SAAiBN,GAAQ,IACfO,EAASP,EAATO,KACR,OAAO,yBAAKF,UAAU,WAAWE,ICQpBC,MAVf,SAAwBR,GAAQ,IAAD,EACJA,EAAMP,OAAvBE,EADqB,EACrBA,KAAMD,EADe,EACfA,OACd,OACE,0BAAMW,UAAU,oBACd,0BAAMA,UAAU,QAAQV,GACxB,0BAAMU,UAAU,UAAUX,K,gBCAjBe,EALF,SAAAT,GACX,IAAMU,EAAaC,IAAOX,EAAMY,MAAMC,UACtC,OAAO,0BAAMR,UAAU,QAAQK,ICElBI,EAJK,WAClB,OAAO,uBAAGT,UAAU,8BCSPU,EAVO,SAAAf,GAAU,IACtBgB,EAAUhB,EAAVgB,MACR,OACE,0BAAMX,UAAU,kBACd,uBAAGA,UAAU,kBACZW,EAAQ,EAAIA,EAAQ,KCIZC,EATI,SAAC,GAAe,IAAbD,EAAY,EAAZA,MACpB,OACE,0BAAMX,UAAU,eACd,uBAAGA,UAAU,iBACb,0BAAMA,UAAU,cAAcW,EAAQ,EAAIA,EAAQ,MCAzCE,EAJW,WACxB,OAAO,uBAAGb,UAAU,0CC6BPc,E,iLArBH,IACAC,EAAUC,KAAKrB,MAAfoB,MACR,OACE,yBAAKf,UAAU,SACb,kBAAC,EAAD,CAAQJ,KAAMmB,EAAM5B,WACpB,yBAAKa,UAAU,WACb,kBAAC,EAAD,CAASE,KAAMa,EAAM7B,UACrB,kBAAC,EAAD,CAAgBE,OAAQ2B,EAAM3B,SAC9B,kBAAC,EAAD,CAAMmB,KAAMQ,EAAMtB,YAClB,yBAAKO,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAeW,MAAOI,EAAMvB,WAC5B,kBAAC,EAAD,CAAYmB,MAAOI,EAAMxB,QACzB,kBAAC,EAAD,a,GAdM0B,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,CAAKT,MAAOU,IAAeC,SAASC,eAAe,SDyH7D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.93169798.chunk.js","sourcesContent":["const testTweet = {\r\n  message: \"Everybody in this country needs to learn to program\",\r\n  gravatar: \"999a5c9a1cf4718be5f393ea94723f1f\",\r\n  author: {\r\n    handle: \"@narhKpodo\",\r\n    name: \"Naphtha Newman\"\r\n  },\r\n  likes: 5,\r\n  retweets: 2,\r\n  timestamp: \"2019-04-06 21:24:37\"\r\n};\r\n\r\nexport default testTweet;\r\n","import React from \"react\";\r\n\r\nfunction Avatar(props) {\r\n  const { hash } = props;\r\n  var url = `https://www.gravatar.com/avatar/${hash}`;\r\n  return <img src={url} alt=\"my gravatar\" className=\"avatar\" />;\r\n}\r\n\r\nexport default Avatar;\r\n","import React from \"react\";\r\n\r\nfunction Message(props) {\r\n  const { text } = props;\r\n  return <div className=\"message\">{text}</div>;\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\n\r\nfunction NameWithHandle(props) {\r\n  const { name, handle } = props.author;\r\n  return (\r\n    <span className=\"name-with-handle\">\r\n      <span className=\"name\">{name}</span>\r\n      <span className=\"handle\">{handle}</span>\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default NameWithHandle;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nconst Time = props => {\r\n  const timeString = moment(props.time).fromNow();\r\n  return <span className=\"time\">{timeString}</span>;\r\n};\r\n\r\nexport default Time;\r\n","import React from \"react\";\r\n\r\nconst ReplyButton = () => {\r\n  return <i className=\"fa fa-reply reply-button\" />;\r\n};\r\n\r\nexport default ReplyButton;\r\n","import React from \"react\";\r\n\r\nconst RetweetButton = props => {\r\n  const { count } = props;\r\n  return (\r\n    <span className=\"retweet-button\">\r\n      <i className=\"fa fa-retweet\" />\r\n      {count > 0 ? count : \"\"}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default RetweetButton;\r\n","import React from \"react\";\r\n\r\nconst LikeButton = ({ count }) => {\r\n  return (\r\n    <span className=\"like-button\">\r\n      <i className=\"fa fa-heart \" />\r\n      <span className=\"like-count\">{count > 0 ? count : \"\"}</span>\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default LikeButton;\r\n","import React from \"react\";\r\n\r\nconst MoreOptionsButton = () => {\r\n  return <i className=\"fa fa-ellipsis-h more-options-button\" />;\r\n};\r\n\r\nexport default MoreOptionsButton;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Avatar from \"./components/Avatar\";\nimport Message from \"./components/Message\";\nimport NameWithHandle from \"./components/NameWithHandle\";\nimport Time from \"./components/Time\";\nimport ReplyButton from \"./components/ReplyButton\";\nimport RetweetButton from \"./components/RetweetButton\";\nimport LikeButton from \"./components/LikeButton\";\nimport MoreOptionsButton from \"./components/MoreOptionsButton\";\nclass App extends Component {\n  render() {\n    const { tweet } = this.props;\n    return (\n      <div className=\"tweet\">\n        <Avatar hash={tweet.gravatar} />\n        <div className=\"content\">\n          <Message text={tweet.message} />\n          <NameWithHandle author={tweet.author} />\n          <Time time={tweet.timestamp} />\n          <div className=\"buttons\">\n            <ReplyButton />\n            <RetweetButton count={tweet.retweets} />\n            <LikeButton count={tweet.likes} />\n            <MoreOptionsButton />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport tweetData from \"./tweetData\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App tweet={tweetData} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}